import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D
from tensorflow.keras.layers import Flatten, Dense
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# ImageDataGenerator 객체 생성

Train_Datagen = ImageDataGenerator(rescale= 1/255)
Test_Datagen = ImageDataGenerator(rescale= 1/255)


# ImageDataGenerator 설정

train_dir = './cats_and_dogs_filtered/train'
test_dir = './cats_and_dogs_filtered/test'


train_generator = Train_Datagen.flow_from_directory(train_dir,   # 학습용 이미지를 가져올 폴더
                                                    classes=['cats', 'dogs'],   # cats 폴더의 이미지 라벨을 0으로 세팅, dogs 폴더의 이미지 라벨을 1로 세팅
                                                    target_size=(150, 150),   # 이미지 리사이징
                                                    batch_size=20,   # 한 번에 20개의 이미지만 가져와서 학습
                                                    class_mode='binary'    # 이진 분류일 경우 설정
)

test_generator = Test_Datagen.flow_from_directory(test_dir,   # 학습용 이미지를 가져올 폴더
                                                  classes=['cats', 'dogs'],   # cats 폴더의 이미지 라벨을 0으로 세팅, dogs 폴더의 이미지 라벨을 1로 세팅
                                                  target_size=(150, 150),   # 이미지 리사이징
                                                  batch_size=20,   # 한 번에 20개의 이미지만 가져와서 학습
                                                  class_mode='binary'    # 이진 분류일 경우 설정
)


# CNN Model 구현

model = Sequential()

model.add(Conv2D(filters=32,
                 kernel_size=(3,3),
                 strides=(1,1),
                 activation='relu',
                 input_shape=(150,150,3)))

model.add(Conv2D(filters=64,
                 kernel_size=(3,3),
                 strides=(1,1),
                 activation='relu'))

model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(filters=64,
                 kernel_size=(3,3),
                 strides=(1,1),
                 activation='relu'))


# FC layer(DNN) 의; input Layer
model.add(Flatten())  # 전체 4차원 에서 2차원으로 바꾸주는것

# hidden  layer
model.add(Dense(units=256, activation='relu'))

# output  layer
model.add(Dense(units=1, activation='sigmoid'))



#model이 어떻게 동작하는지를 지정
model.compile(optimizer=Adam(learning_rate=1e-4),
              loss='binary_crossentropy',
              metrics=['accuracy'])




model.fit(train_generator,
          steps_per_epoch=100,
          epochs=30,
          verbose=1,
          validation_data=test_generator,
          validation_steps=50)
